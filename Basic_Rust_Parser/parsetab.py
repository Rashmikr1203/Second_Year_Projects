
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ARITHMETIC_OPERATOR ASSIGNMENT_OPERATOR CLOSE COMMA COMPARISON_OPERATOR CONDITIONAL CONDITIONAL_EXPRESSION DECLARATION ELSE EQ FUNCTION_CALL FUNCTION_DEFINITION ID LET LITERAL LOGICAL_OPERATOR LOOP LPAREN OPEN PARENTHESIZED_EXPRESSION PATTERN_MATCHING PRINTLN RPAREN SEMI STATEMENT TYPE VARIABLE WHILEWhileLoop : WHILE Expression OPEN Block CLOSEPrintstatement : PRINTLN Statement SEMIArithmeticExpression : Expression ARITHMETIC_OPERATOR ExpressionComparisonExpression : Expression COMPARISON_OPERATOR ExpressionFunctionCall : FUNCTION_CALLConditionalExpression : CONDITIONAL_EXPRESSIONLogicalExpression : Expression LOGICAL_OPERATOR ExpressionAssignmentExpression : VARIABLE ASSIGNMENT_OPERATOR ExpressionParenthesizedExpression : PARENTHESIZED_EXPRESSIONFunctionDefinition : FUNCTION_DEFINITIONDeclaration : DECLARATION LITERAL EQ ExpressionStatement : STATEMENT SEMILoop : LOOP OPEN Block CLOSEConditional : CONDITIONAL OPEN Block CLOSEFunctionDefinition : FUNCTION_DEFINITION LITERAL Expression OPEN Block CLOSEPatternMatching : PATTERN_MATCHING Expression OPEN Block CLOSE\n    TypeConversion : TYPE LPAREN Expression RPAREN\n    \n    tuple_elements : COMMA Type tuple_elements\n                   | empty\n    \n    Type : TYPE\n    empty :\n    TupleDeclaration : LPAREN Type tuple_elements RPAREN\n    \n    Pattern : ID\n    \n    LetElseConditional : LET Pattern EQ Expression ELSE Block\n    \n    WhileLetLoop : WHILE LET Pattern EQ Expression Block\n    Expression : LITERAL\n                   | VARIABLE\n                   | ArithmeticExpression\n                   | ComparisonExpression\n                   | FunctionCall\n                   | ConditionalExpression\n                   | LogicalExpression\n                   | AssignmentExpression\n                   | ParenthesizedExpression\n                   | FunctionDefinition\n                   | Statement\n\n    Block : OPEN DECLARATION CLOSE\n              | OPEN STATEMENT CLOSE\n              | OPEN LOOP CLOSE\n              | OPEN CONDITIONAL CLOSE\n              | OPEN FUNCTION_DEFINITION CLOSE\n              | OPEN PATTERN_MATCHING CLOSE\n              | OPEN LET CLOSE\n              | OPEN WhileLoop CLOSE\n              | OPEN Declaration CLOSE\n              | OPEN Loop CLOSE\n              | OPEN Conditional CLOSE\n              | OPEN PatternMatching CLOSE\n              | OPEN TypeConversion CLOSE\n              | OPEN TupleDeclaration CLOSE\n              | OPEN LetElseConditional CLOSE\n              | OPEN WhileLetLoop CLOSE \n              | OPEN CLOSE'
    
_lr_action_items = {'WHILE':([0,27,],[2,51,]),'$end':([1,54,],[0,-1,]),'LITERAL':([2,18,21,22,23,24,25,34,40,51,79,83,87,99,],[4,25,4,4,4,4,4,57,4,4,4,4,4,4,]),'VARIABLE':([2,21,22,23,24,25,40,51,79,83,87,99,],[5,5,5,5,5,5,5,5,5,5,5,5,]),'FUNCTION_CALL':([2,21,22,23,24,25,40,51,79,83,87,99,],[15,15,15,15,15,15,15,15,15,15,15,15,]),'CONDITIONAL_EXPRESSION':([2,21,22,23,24,25,40,51,79,83,87,99,],[16,16,16,16,16,16,16,16,16,16,16,16,]),'PARENTHESIZED_EXPRESSION':([2,21,22,23,24,25,40,51,79,83,87,99,],[17,17,17,17,17,17,17,17,17,17,17,17,]),'FUNCTION_DEFINITION':([2,21,22,23,24,25,27,40,51,79,83,87,99,],[18,18,18,18,18,18,39,18,18,18,18,18,18,]),'STATEMENT':([2,21,22,23,24,25,27,40,51,79,83,87,99,],[19,19,19,19,19,19,36,19,19,19,19,19,19,]),'OPEN':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,20,26,29,30,31,32,33,37,38,55,59,61,65,86,93,104,105,],[20,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-5,-6,-9,-10,27,-12,-3,-4,-7,-8,55,59,61,27,27,27,86,27,-15,27,27,]),'ARITHMETIC_OPERATOR':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,26,29,30,31,32,33,65,89,93,94,98,105,],[21,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-5,-6,-9,-10,-12,21,21,21,21,21,21,21,-15,21,21,21,]),'COMPARISON_OPERATOR':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,26,29,30,31,32,33,65,89,93,94,98,105,],[22,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-5,-6,-9,-10,-12,22,22,22,22,22,22,22,-15,22,22,22,]),'LOGICAL_OPERATOR':([3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,26,29,30,31,32,33,65,89,93,94,98,105,],[23,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-5,-6,-9,-10,-12,23,23,23,23,23,23,23,-15,23,23,23,]),'RPAREN':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,26,29,30,31,32,80,81,89,90,92,93,102,106,],[-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-5,-6,-9,-10,-12,-3,-4,-7,-8,-21,-20,100,101,-19,-15,-21,-18,]),'CLOSE':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,26,27,28,29,30,31,32,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,54,56,58,60,62,63,64,66,69,70,71,72,73,74,75,76,77,82,84,85,93,94,95,96,97,100,101,103,107,108,],[-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-5,-6,-9,-10,-12,35,54,-3,-4,-7,-8,56,-53,58,60,62,63,64,66,69,70,71,72,73,74,75,76,77,-1,-37,-38,-39,-40,-41,-42,-43,-44,-45,-46,-47,-48,-49,-50,-51,-52,93,95,96,-15,-11,-13,-14,103,-17,-22,-16,-24,-25,]),'ELSE':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,26,29,30,31,32,93,98,],[-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36,-5,-6,-9,-10,-12,-3,-4,-7,-8,-15,104,]),'ASSIGNMENT_OPERATOR':([5,],[24,]),'SEMI':([19,],[26,]),'DECLARATION':([27,],[34,]),'LOOP':([27,],[37,]),'CONDITIONAL':([27,],[38,]),'PATTERN_MATCHING':([27,],[40,]),'LET':([27,51,],[41,78,]),'TYPE':([27,53,91,],[52,81,81,]),'LPAREN':([27,52,],[53,79,]),'ID':([41,78,],[68,68,]),'EQ':([57,67,68,88,],[83,87,-23,99,]),'COMMA':([80,81,102,],[91,-20,91,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'WhileLoop':([0,27,],[1,42,]),'Expression':([2,21,22,23,24,25,40,51,79,83,87,99,],[3,29,30,31,32,33,65,3,89,94,98,105,]),'ArithmeticExpression':([2,21,22,23,24,25,40,51,79,83,87,99,],[6,6,6,6,6,6,6,6,6,6,6,6,]),'ComparisonExpression':([2,21,22,23,24,25,40,51,79,83,87,99,],[7,7,7,7,7,7,7,7,7,7,7,7,]),'FunctionCall':([2,21,22,23,24,25,40,51,79,83,87,99,],[8,8,8,8,8,8,8,8,8,8,8,8,]),'ConditionalExpression':([2,21,22,23,24,25,40,51,79,83,87,99,],[9,9,9,9,9,9,9,9,9,9,9,9,]),'LogicalExpression':([2,21,22,23,24,25,40,51,79,83,87,99,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'AssignmentExpression':([2,21,22,23,24,25,40,51,79,83,87,99,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'ParenthesizedExpression':([2,21,22,23,24,25,40,51,79,83,87,99,],[12,12,12,12,12,12,12,12,12,12,12,12,]),'FunctionDefinition':([2,21,22,23,24,25,40,51,79,83,87,99,],[13,13,13,13,13,13,13,13,13,13,13,13,]),'Statement':([2,21,22,23,24,25,40,51,79,83,87,99,],[14,14,14,14,14,14,14,14,14,14,14,14,]),'Block':([20,55,59,61,86,104,105,],[28,82,84,85,97,107,108,]),'Declaration':([27,],[43,]),'Loop':([27,],[44,]),'Conditional':([27,],[45,]),'PatternMatching':([27,],[46,]),'TypeConversion':([27,],[47,]),'TupleDeclaration':([27,],[48,]),'LetElseConditional':([27,],[49,]),'WhileLetLoop':([27,],[50,]),'Pattern':([41,78,],[67,88,]),'Type':([53,91,],[80,102,]),'tuple_elements':([80,102,],[90,106,]),'empty':([80,102,],[92,92,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> WhileLoop","S'",1,None,None,None),
  ('WhileLoop -> WHILE Expression OPEN Block CLOSE','WhileLoop',5,'p_WhileLoop','AFLL.py',71),
  ('Printstatement -> PRINTLN Statement SEMI','Printstatement',3,'p_statement_println','AFLL.py',75),
  ('ArithmeticExpression -> Expression ARITHMETIC_OPERATOR Expression','ArithmeticExpression',3,'p_ArithmeticExpression','AFLL.py',79),
  ('ComparisonExpression -> Expression COMPARISON_OPERATOR Expression','ComparisonExpression',3,'p_ComparisonExpression','AFLL.py',83),
  ('FunctionCall -> FUNCTION_CALL','FunctionCall',1,'p_FunctionCall','AFLL.py',87),
  ('ConditionalExpression -> CONDITIONAL_EXPRESSION','ConditionalExpression',1,'p_ConditionalExpression','AFLL.py',91),
  ('LogicalExpression -> Expression LOGICAL_OPERATOR Expression','LogicalExpression',3,'p_LogicalExpression','AFLL.py',95),
  ('AssignmentExpression -> VARIABLE ASSIGNMENT_OPERATOR Expression','AssignmentExpression',3,'p_AssignmentExpression','AFLL.py',99),
  ('ParenthesizedExpression -> PARENTHESIZED_EXPRESSION','ParenthesizedExpression',1,'p_ParenthesizedExpression','AFLL.py',103),
  ('FunctionDefinition -> FUNCTION_DEFINITION','FunctionDefinition',1,'p_FunctionDefinition','AFLL.py',107),
  ('Declaration -> DECLARATION LITERAL EQ Expression','Declaration',4,'p_Declaration','AFLL.py',111),
  ('Statement -> STATEMENT SEMI','Statement',2,'p_Statement','AFLL.py',115),
  ('Loop -> LOOP OPEN Block CLOSE','Loop',4,'p_Loop','AFLL.py',119),
  ('Conditional -> CONDITIONAL OPEN Block CLOSE','Conditional',4,'p_Conditional','AFLL.py',123),
  ('FunctionDefinition -> FUNCTION_DEFINITION LITERAL Expression OPEN Block CLOSE','FunctionDefinition',6,'p_FunctionDefinitionB','AFLL.py',127),
  ('PatternMatching -> PATTERN_MATCHING Expression OPEN Block CLOSE','PatternMatching',5,'p_PatternMatching','AFLL.py',131),
  ('TypeConversion -> TYPE LPAREN Expression RPAREN','TypeConversion',4,'p_TypeConversion','AFLL.py',136),
  ('tuple_elements -> COMMA Type tuple_elements','tuple_elements',3,'p_tuple_elements','AFLL.py',142),
  ('tuple_elements -> empty','tuple_elements',1,'p_tuple_elements','AFLL.py',143),
  ('Type -> TYPE','Type',1,'p_Type','AFLL.py',149),
  ('empty -> <empty>','empty',0,'p_empty','AFLL.py',154),
  ('TupleDeclaration -> LPAREN Type tuple_elements RPAREN','TupleDeclaration',4,'p_TupleDeclaration','AFLL.py',159),
  ('Pattern -> ID','Pattern',1,'p_Pattern','AFLL.py',165),
  ('LetElseConditional -> LET Pattern EQ Expression ELSE Block','LetElseConditional',6,'p_LetElseConditional','AFLL.py',171),
  ('WhileLetLoop -> WHILE LET Pattern EQ Expression Block','WhileLetLoop',6,'p_WhileLetLoop','AFLL.py',177),
  ('Expression -> LITERAL','Expression',1,'p_Expression','AFLL.py',182),
  ('Expression -> VARIABLE','Expression',1,'p_Expression','AFLL.py',183),
  ('Expression -> ArithmeticExpression','Expression',1,'p_Expression','AFLL.py',184),
  ('Expression -> ComparisonExpression','Expression',1,'p_Expression','AFLL.py',185),
  ('Expression -> FunctionCall','Expression',1,'p_Expression','AFLL.py',186),
  ('Expression -> ConditionalExpression','Expression',1,'p_Expression','AFLL.py',187),
  ('Expression -> LogicalExpression','Expression',1,'p_Expression','AFLL.py',188),
  ('Expression -> AssignmentExpression','Expression',1,'p_Expression','AFLL.py',189),
  ('Expression -> ParenthesizedExpression','Expression',1,'p_Expression','AFLL.py',190),
  ('Expression -> FunctionDefinition','Expression',1,'p_Expression','AFLL.py',191),
  ('Expression -> Statement','Expression',1,'p_Expression','AFLL.py',192),
  ('Block -> OPEN DECLARATION CLOSE','Block',3,'p_Block','AFLL.py',198),
  ('Block -> OPEN STATEMENT CLOSE','Block',3,'p_Block','AFLL.py',199),
  ('Block -> OPEN LOOP CLOSE','Block',3,'p_Block','AFLL.py',200),
  ('Block -> OPEN CONDITIONAL CLOSE','Block',3,'p_Block','AFLL.py',201),
  ('Block -> OPEN FUNCTION_DEFINITION CLOSE','Block',3,'p_Block','AFLL.py',202),
  ('Block -> OPEN PATTERN_MATCHING CLOSE','Block',3,'p_Block','AFLL.py',203),
  ('Block -> OPEN LET CLOSE','Block',3,'p_Block','AFLL.py',204),
  ('Block -> OPEN WhileLoop CLOSE','Block',3,'p_Block','AFLL.py',205),
  ('Block -> OPEN Declaration CLOSE','Block',3,'p_Block','AFLL.py',206),
  ('Block -> OPEN Loop CLOSE','Block',3,'p_Block','AFLL.py',207),
  ('Block -> OPEN Conditional CLOSE','Block',3,'p_Block','AFLL.py',208),
  ('Block -> OPEN PatternMatching CLOSE','Block',3,'p_Block','AFLL.py',209),
  ('Block -> OPEN TypeConversion CLOSE','Block',3,'p_Block','AFLL.py',210),
  ('Block -> OPEN TupleDeclaration CLOSE','Block',3,'p_Block','AFLL.py',211),
  ('Block -> OPEN LetElseConditional CLOSE','Block',3,'p_Block','AFLL.py',212),
  ('Block -> OPEN WhileLetLoop CLOSE','Block',3,'p_Block','AFLL.py',213),
  ('Block -> OPEN CLOSE','Block',2,'p_Block','AFLL.py',214),
]
